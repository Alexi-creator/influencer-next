"use client"

import React, { ReactNode, useMemo } from "react"
import clsx from "clsx"

import { BreakpointName } from "@/types/breakpointTypes"
import { useBreakpoint } from "@/hooks/useBreakpoint"

import "./styles.scss"

interface MasonryProps extends React.HTMLAttributes<HTMLDivElement> {
  classNameColumn?: string
  breakpointsSettings: Partial<Record<BreakpointName, number>>
  children: ReactNode[]
};

/**
 * Masonry ‚Äî —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–π —Å–µ—Ç–∫–∏ —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏,
 * –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ—Ç–æ—Ä—ã—Ö –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç–∞.
 *
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ö—É–∫ `useBreakpoint` –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞ –∏
 * –≤—ã–±–∏—Ä–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫ –∏–∑ `breakpointsSettings`.
 *
 * üìå –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
 * ```tsx
 * <Masonry
 *   breakpointsSettings={{ mobile: 1, tablet: 2, desktop: 3 }}
 *   className="my-masonry"
 *   classNameColumn="my-column"
 * >
 *   {items.map(item => <Card key={item.id} {...item} />)}
 * </Masonry>
 * ```
 *
 * @component
 * @param {Object} props - –°–≤–æ–π—Å—Ç–≤–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 * @param {string} [props.className] - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –æ–±—ë—Ä—Ç–∫–∏ —Å–µ—Ç–∫–∏
 * @param {string} [props.classNameColumn] - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Å –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–∏
 * @param {Partial<Record<BreakpointName, number>>} props.breakpointsSettings -
 *   –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç–æ–≤.
 *   –ö–ª—é—á–∏ ‚Äî –∏–º–µ–Ω–∞ –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç–æ–≤ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "mobile", "tablet", "desktop"),
 *   –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫.
 *   –ï—Å–ª–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –±—Ä–µ–π–∫–ø–æ–∏–Ω—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –∑–Ω–∞—á–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑ –æ–±—ä–µ–∫—Ç–∞.
 * @param {ReactNode[]} props.children - –≠–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –ø–æ –∫–æ–ª–æ–Ω–∫–∞–º
 *
 * @returns {JSX.Element | null} JSX —ç–ª–µ–º–µ–Ω—Ç —Å —Å–µ—Ç–∫–æ–π –∏–ª–∏ `null`, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –≤—ã—á–∏—Å–ª–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫
 */
export const Masonry = ({
  className,
  classNameColumn,
  breakpointsSettings,
  children,
} : MasonryProps) => {
  const { currentBreakpoint } = useBreakpoint()

  let columns: number | undefined

  if (currentBreakpoint) {
    columns = breakpointsSettings[currentBreakpoint] || Object.values(breakpointsSettings).at(-1)
  }

  const columnWrappers = useMemo(() => {
    if (!columns) return undefined

    const cols: ReactNode[][] = Array.from({ length: columns }, () => [])
    children.forEach((child, index) => {
      cols[index % columns].push(child)
    })

    return cols
  }, [children, columns])

  if (!columnWrappers) return null

  return (
    <div className={clsx("masonry", className)} style={{ gridTemplateColumns: `repeat(${columns}, 1fr)` }}>
      {columnWrappers.map((col, idx) => (
        <div key={idx} className={clsx("masonry__column", classNameColumn)}>
          {col}
        </div>
      ))}
    </div>
  )
}
